

var apiUrl = "<%= ENV['API_URL'] %>";

var ajaxConfig = { 
  method:'get',
  mode:"cors",
  // cache:"force-cache",
  headers:{
    "Access-Control-Allow-Origin":'*',
    "Access-Control-Request-Method":'GET'

  }
 };

function FindTaskById(task) {

  if (task.id === this[0]) {
      return task;
  }
}

function goToClients(cell) {
  var provider = cell.originalTarget.textContent.toLowerCase();
  table.setData(apiUrl+"/clients/totals?provider-id=" + provider,{}, ajaxConfig);
  ga("send", {
    hitType: 'event',
    eventCategory: 'stats',
    eventAction: 'filterProvider',
    eventLabel: provider
  });  
}

function goToPrefixes(cell) {
  var client = cell.originalTarget.textContent.toLowerCase();
  table.setData(apiUrl+"/prefixes/totals?client-id=" + client,{}, ajaxConfig);
  ga("send", {
    hitType: 'event',
    eventCategory: 'stats',
    eventAction: 'filterClient',
    eventLabel: client
  });  
}


function getCsv(){
  table.download("csv", "data.csv");
  ga("send", {
    hitType: 'event',
    eventCategory: 'stats',
    eventAction: 'download',
    eventLabel: 'csv'
  });  
}

function queryDatacite(url, config, params){
  return new Promise(function(resolve, reject){
    //do some async data retrieval then pass the array of row data back into Tabulator
    $.ajax({
      type : "GET",
      url : url,
      dataType : "json",
      cache : true,
      // async : true,
		  success : function(data) {
        resolve(data);
      }
    });
    

    //if there is an error call this function and pass the error message or object into it
    // reject();
});
}

var iniUrl = apiUrl + "/providers/totals";
var table = new Tabulator("#doi-production-table", {
  responsiveLayout:true,
  layout:"fitColumns",
  // ajaxContentType:"json",
  ajaxURL:iniUrl,
  ajaxRequestFunc:queryDatacite,
  placeholder:"No Data Available. API might be not working. Please check status.datacite.org.",
  ajaxResponse:function(url, params, response){

    var myList2 = response.map(function(element) {
      if(element.states == null) {
        var findable = {"count":"0"};
        var registered = {"count":"0"};
        var draft = {"count":"0"};
      }else{
        var findable = element.states.find(FindTaskById,['findable']);
        var registered = element.states.find(FindTaskById,['registered']);
        var draft = element.states.find(FindTaskById,['draft']);       
      }

      if(element.temporal == null) {
        var this_year = {"count":"0"};
        var last_year = {"count":"0"};
        var this_month = {"count":"0"};
      } else{
        var this_year = ( element.temporal.this_year == null) ? {"count":"0"} : element.temporal.this_year[0];
        var last_year = ( element.temporal.last_year == null) ? {"count":"0"} : element.temporal.last_year[0];
        var this_month = ( element.temporal.this_month == null) ? {"count":"0"} : element.temporal.this_month[0];     
      }

      var findable = (typeof findable === 'undefined') ? {"count":"0"} : findable;
      var registered = (typeof registered === 'undefined') ? {"count":"0"} : registered;
      var draft = (typeof draft === 'undefined') ? {"count":"0"} : draft;

      return {"id": element.id, 
       "title": element.title, 
        "total": element.count, 
        "findable": findable.count, 
        "registered": registered.count, 
        "draft": draft.count,
        "this_year": this_year.count,
        "last_year": last_year.count , 
        "this_month": this_month.count
      };
    });

    return myList2; 
  },
  columns:[
    {title:"ID", field:"id", sorter:"string", cellClick:goToClients,responsive:0},
    {title:"Name", field:"title", minWidth:350, responsive:0},
    {title:"DOI Registrations", align:"center",
      columns:[
      {title:"Total", field:"total", sorter:"string", align:"right", formatter:"money", bottomCalc:"sum",formatterParams:{precision:false, thousand:","},bottomCalcformatterParams:{precision:false, thousand:","}},
      {title:"2019", field:"this_year", align:"right", formatter:"money", bottomCalc:"sum",formatterParams:{precision:false, thousand:","},bottomCalcformatterParams:{precision:false, thousand:","}},
      {title:"2018", field:"last_year", align:"right", formatter:"money", bottomCalc:"sum",formatterParams:{precision:false, thousand:","},bottomCalcformatterParams:{precision:false, thousand:","}},
      {title:"This month", field:"this_month", align:"right", formatter:"money", bottomCalc:"sum",formatterParams:{precision:false, thousand:","},bottomCalcformatterParams:{precision:false, thousand:","}},
   ]},
    {title:"DOI Metadata", align:"center",
      columns:[
      {title:"Findable", field:"findable", align:"right", formatter:"money", bottomCalc:"sum",formatterParams:{precision:false, thousand:","},bottomCalcformatterParams:{precision:false, thousand:","}},
      {title:"Registered", field:"registered", align:"right", formatter:"money", bottomCalc:"sum",formatterParams:{precision:false, thousand:","},bottomCalcformatterParams:{precision:false, thousand:","}},
      {title:"Draft", field:"draft", align:"right", formatter:"money", bottomCalc:"sum",formatterParams:{precision:false, thousand:","},bottomCalcformatterParams:{precision:false, thousand:","}},
  ]}
  ]}
);

// table.setData(apiUrl + "/providers/totals",{}, ajaxConfig);
table.setSort("id", "asc");